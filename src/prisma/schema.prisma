// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "sqlite"
   url      = env("DATABASE_URL")
}

model User {
   id               String @id @unique
   name             String
   email            String @unique
   theme            String @default("wireframe")
   validateTokenUrl String @default("")

   auth_session Session[]
   key          Key[]
   databases    Database[]
   apiKeys      APIKey[]
   reports      Report[]
}

model Session {
   id             String @id @unique
   user_id        String
   user_picture   String
   active_expires BigInt
   idle_expires   BigInt

   user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

   @@index([user_id])
}

model Key {
   id              String  @id @unique
   hashed_password String?
   user_id         String

   user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

   @@index([user_id])
}

model Database {
   id               String            @id @unique @default(nanoid())
   createdAt        DateTime          @default(now())
   updatedAt        DateTime          @updatedAt
   name             String
   provider         String
   connectionType   String
   connectionString String?
   connectionOption ConnectionOption?
   userId           String

   user     User      @relation(fields: [userId], references: [id])
   datasets Dataset[]

   @@unique([userId, name])
}

model ConnectionOption {
   id           String   @id @unique @default(nanoid())
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt
   host         String
   port         Int
   databaseName String
   username     String
   password     String
   databaseId   String   @unique

   database Database @relation(fields: [databaseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model APIKey {
   id        String   @id @unique @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   name      String
   userId    String

   user User @relation(fields: [userId], references: [id])

   @@unique([userId, name])
}

model Report {
   id           String   @id @unique @default(nanoid())
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt
   name         String
   description  String
   theme        String
   canvasHeight Int
   userId       String

   user             User              @relation(fields: [userId], references: [id])
   datasets         Dataset[]
   cardComponents   CardComponent[]
   tableComponents  TableComponent[]
   inputComponents  InputComponent[]
   buttonComponents ButtonComponent[]

   @@unique([userId, name])
}

model Dataset {
   id         String   @id @unique @default(nanoid())
   createdAt  DateTime @default(now())
   updatedAt  DateTime @updatedAt
   name       String
   query      String
   databaseId String?
   reportId   String

   database         Database?         @relation(fields: [databaseId], references: [id])
   report           Report            @relation(fields: [reportId], references: [id], onUpdate: Cascade, onDelete: Cascade)
   cardComponents   CardComponent[]
   queryParams      QueryParam[]
   tableComponents  TableComponent[]
   buttonComponents ButtonComponent[]

   @@unique([reportId, name])
}

model QueryParam {
   id        String   @id @unique @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   key       String
   value     String
   datasetId String

   dataset         Dataset          @relation(fields: [datasetId], references: [id])
   inputComponents InputComponent[]
}

model InputComponent {
   id        String   @id @unique @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   name      String

   label     String
   type      String
   valueType String?
   values    String?

   reportId     String
   queryParamId String?
   propertiesId String  @unique

   report     Report              @relation(fields: [reportId], references: [id], onUpdate: Cascade, onDelete: Cascade)
   queryParam QueryParam?         @relation(fields: [queryParamId], references: [id])
   properties ComponentProperties @relation(fields: [propertiesId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ButtonComponent {
   id        String   @id @unique @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   name      String

   type String
   text String

   reportId     String
   datasetId    String?
   propertiesId String  @unique

   report     Report              @relation(fields: [reportId], references: [id], onUpdate: Cascade, onDelete: Cascade)
   dataset    Dataset?            @relation(fields: [datasetId], references: [id])
   properties ComponentProperties @relation(fields: [propertiesId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model CardComponent {
   id        String   @id @unique @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   name      String

   label     String
   column    String
   rowNumber Int

   reportId     String
   datasetId    String?
   propertiesId String  @unique

   report     Report              @relation(fields: [reportId], references: [id], onUpdate: Cascade, onDelete: Cascade)
   dataset    Dataset?            @relation(fields: [datasetId], references: [id])
   properties ComponentProperties @relation(fields: [propertiesId], references: [id], onUpdate: Cascade, onDelete: Cascade)

   @@unique([reportId, name])
}

model TableComponent {
   id        String   @id @unique @default(nanoid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   name      String

   label     String
   columns   String
   rows      String
   searching Boolean
   ordering  Boolean
   paging    Boolean
   info      Boolean

   reportId     String
   datasetId    String?
   propertiesId String  @unique

   report     Report              @relation(fields: [reportId], references: [id], onUpdate: Cascade, onDelete: Cascade)
   dataset    Dataset?            @relation(fields: [datasetId], references: [id])
   properties ComponentProperties @relation(fields: [propertiesId], references: [id], onUpdate: Cascade, onDelete: Cascade)

   @@unique([reportId, name])
}

model ComponentProperties {
   id              String           @id @unique @default(nanoid())
   createdAt       DateTime         @default(now())
   updatedAt       DateTime         @updatedAt
   x               Int
   y               Int
   width           Int
   height          Int
   padding         Int
   opacity         Int
   bgColor         String
   textColor       String
   shadow          String
   rounded         String
   border          Boolean
   outline         Boolean
   cardComponent   CardComponent?
   tableComponent  TableComponent?
   inputComponent  InputComponent?
   buttonComponent ButtonComponent?
}
